version: "3.8"

name: "go-meechok"

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks: [ "microservices" ]

  node_exporter:
    container_name: node_exporter_container
    restart: always
    image: prom/node-exporter
    ports:
      - '9101:9100'
    networks: [ "microservices" ]

  grafana:
    container_name: grafana_container
    restart: always
    image: grafana/grafana
    ports:
      - '3005:3000'
    networks: [ "microservices" ]

  redis:
    image: redis:6-alpine
    restart: always
    container_name: redis_container
    ports:
      - "6379:6379"
    networks: [ "microservices" ]

  zoo1:
    image: zookeeper:3.4.9
    restart: always
    hostname: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo1:2888:3888
    volumes:
      - ./zk-single-kafka-single/zoo1/data:/data
      - ./zk-single-kafka-single/zoo1/datalog:/datalog
    networks: [ "microservices" ]

  kafka:
    image: confluentinc/cp-kafka:5.5.1
    restart: always
    hostname: kafka1
    ports:
      - "9092:9092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
    volumes:
      - ./zk-single-kafka-single/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zoo1
    networks: [ "microservices" ]

  jaeger:
    container_name: jaeger_container
    restart: always
    image: jaegertracing/all-in-one:1.21
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks: [ "microservices" ]

  auth:
    build: ./auth
    container_name: auth_service
    ports:
      - "50051:50051"
    environment:
      - MONGO_URI=mongodb://auth-db:27017/auth
    depends_on:
      - auth-db
    networks: [ "microservices" ]

  auth-db:
    image: mongo:4.2
    container_name: auth_db
    ports:
      - "27017:27017"
    volumes:
      - auth-data:/data/db
    networks: [ "microservices" ]

  user:
    build: ./user
    container_name: user_service
    ports:
      - "50052:50052"
    environment:
      - MONGO_URI=mongodb://user-db:27017/user
    depends_on:
      - user-db
    networks: [ "microservices" ]

  user-db:
    image: mongo:4.2
    container_name: user_db
    ports:
      - "27018:27017"
    volumes:
      - user-data:/data/db
    networks: [ "microservices" ]

  inventory:
    build: ./inventory
    container_name: inventory_service
    ports:
      - "50053:50053"
    environment:
      - MONGO_URI=mongodb://inventory-db:27017/inventory
    depends_on:
      - inventory-db
    networks: [ "microservices" ]

  inventory-db:
    image: mongo:4.2
    container_name: inventory_db
    ports:
      - "27019:27017"
    volumes:
      - inventory-data:/data/db
    networks: [ "microservices" ]

volumes:
  auth-data:
  user-data:
  inventory-data:

networks:
  microservices:
    name: microservices
